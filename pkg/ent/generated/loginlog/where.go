// Code generated by ent, DO NOT EDIT.

package loginlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"admin_backend/pkg/ent/generated/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// LogID applies equality check predicate on the "log_id" field. It's identical to LogIDEQ.
func LogID(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldLogID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldUserID, v))
}

// UserName applies equality check predicate on the "user_name" field. It's identical to UserNameEQ.
func UserName(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldUserName, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldIP, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldStatus, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldMessage, v))
}

// Browser applies equality check predicate on the "browser" field. It's identical to BrowserEQ.
func Browser(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldBrowser, v))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldOs, v))
}

// UserAgent applies equality check predicate on the "user_agent" field. It's identical to UserAgentEQ.
func UserAgent(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldUserAgent, v))
}

// Device applies equality check predicate on the "device" field. It's identical to DeviceEQ.
func Device(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldDevice, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldLocation, v))
}

// LoginTime applies equality check predicate on the "login_time" field. It's identical to LoginTimeEQ.
func LoginTime(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldLoginTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// LogIDEQ applies the EQ predicate on the "log_id" field.
func LogIDEQ(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldLogID, v))
}

// LogIDNEQ applies the NEQ predicate on the "log_id" field.
func LogIDNEQ(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldLogID, v))
}

// LogIDIn applies the In predicate on the "log_id" field.
func LogIDIn(vs ...uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldLogID, vs...))
}

// LogIDNotIn applies the NotIn predicate on the "log_id" field.
func LogIDNotIn(vs ...uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldLogID, vs...))
}

// LogIDGT applies the GT predicate on the "log_id" field.
func LogIDGT(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldLogID, v))
}

// LogIDGTE applies the GTE predicate on the "log_id" field.
func LogIDGTE(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldLogID, v))
}

// LogIDLT applies the LT predicate on the "log_id" field.
func LogIDLT(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldLogID, v))
}

// LogIDLTE applies the LTE predicate on the "log_id" field.
func LogIDLTE(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldLogID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uint64) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldUserID, v))
}

// UserNameEQ applies the EQ predicate on the "user_name" field.
func UserNameEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldUserName, v))
}

// UserNameNEQ applies the NEQ predicate on the "user_name" field.
func UserNameNEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldUserName, v))
}

// UserNameIn applies the In predicate on the "user_name" field.
func UserNameIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldUserName, vs...))
}

// UserNameNotIn applies the NotIn predicate on the "user_name" field.
func UserNameNotIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldUserName, vs...))
}

// UserNameGT applies the GT predicate on the "user_name" field.
func UserNameGT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldUserName, v))
}

// UserNameGTE applies the GTE predicate on the "user_name" field.
func UserNameGTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldUserName, v))
}

// UserNameLT applies the LT predicate on the "user_name" field.
func UserNameLT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldUserName, v))
}

// UserNameLTE applies the LTE predicate on the "user_name" field.
func UserNameLTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldUserName, v))
}

// UserNameContains applies the Contains predicate on the "user_name" field.
func UserNameContains(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContains(FieldUserName, v))
}

// UserNameHasPrefix applies the HasPrefix predicate on the "user_name" field.
func UserNameHasPrefix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasPrefix(FieldUserName, v))
}

// UserNameHasSuffix applies the HasSuffix predicate on the "user_name" field.
func UserNameHasSuffix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasSuffix(FieldUserName, v))
}

// UserNameEqualFold applies the EqualFold predicate on the "user_name" field.
func UserNameEqualFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEqualFold(FieldUserName, v))
}

// UserNameContainsFold applies the ContainsFold predicate on the "user_name" field.
func UserNameContainsFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContainsFold(FieldUserName, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContainsFold(FieldIP, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldStatus, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContainsFold(FieldMessage, v))
}

// BrowserEQ applies the EQ predicate on the "browser" field.
func BrowserEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldBrowser, v))
}

// BrowserNEQ applies the NEQ predicate on the "browser" field.
func BrowserNEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldBrowser, v))
}

// BrowserIn applies the In predicate on the "browser" field.
func BrowserIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldBrowser, vs...))
}

// BrowserNotIn applies the NotIn predicate on the "browser" field.
func BrowserNotIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldBrowser, vs...))
}

// BrowserGT applies the GT predicate on the "browser" field.
func BrowserGT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldBrowser, v))
}

// BrowserGTE applies the GTE predicate on the "browser" field.
func BrowserGTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldBrowser, v))
}

// BrowserLT applies the LT predicate on the "browser" field.
func BrowserLT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldBrowser, v))
}

// BrowserLTE applies the LTE predicate on the "browser" field.
func BrowserLTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldBrowser, v))
}

// BrowserContains applies the Contains predicate on the "browser" field.
func BrowserContains(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContains(FieldBrowser, v))
}

// BrowserHasPrefix applies the HasPrefix predicate on the "browser" field.
func BrowserHasPrefix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasPrefix(FieldBrowser, v))
}

// BrowserHasSuffix applies the HasSuffix predicate on the "browser" field.
func BrowserHasSuffix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasSuffix(FieldBrowser, v))
}

// BrowserIsNil applies the IsNil predicate on the "browser" field.
func BrowserIsNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIsNull(FieldBrowser))
}

// BrowserNotNil applies the NotNil predicate on the "browser" field.
func BrowserNotNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotNull(FieldBrowser))
}

// BrowserEqualFold applies the EqualFold predicate on the "browser" field.
func BrowserEqualFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEqualFold(FieldBrowser, v))
}

// BrowserContainsFold applies the ContainsFold predicate on the "browser" field.
func BrowserContainsFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContainsFold(FieldBrowser, v))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasSuffix(FieldOs, v))
}

// OsIsNil applies the IsNil predicate on the "os" field.
func OsIsNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIsNull(FieldOs))
}

// OsNotNil applies the NotNil predicate on the "os" field.
func OsNotNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotNull(FieldOs))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContainsFold(FieldOs, v))
}

// UserAgentEQ applies the EQ predicate on the "user_agent" field.
func UserAgentEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldUserAgent, v))
}

// UserAgentNEQ applies the NEQ predicate on the "user_agent" field.
func UserAgentNEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldUserAgent, v))
}

// UserAgentIn applies the In predicate on the "user_agent" field.
func UserAgentIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldUserAgent, vs...))
}

// UserAgentNotIn applies the NotIn predicate on the "user_agent" field.
func UserAgentNotIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldUserAgent, vs...))
}

// UserAgentGT applies the GT predicate on the "user_agent" field.
func UserAgentGT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldUserAgent, v))
}

// UserAgentGTE applies the GTE predicate on the "user_agent" field.
func UserAgentGTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldUserAgent, v))
}

// UserAgentLT applies the LT predicate on the "user_agent" field.
func UserAgentLT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldUserAgent, v))
}

// UserAgentLTE applies the LTE predicate on the "user_agent" field.
func UserAgentLTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldUserAgent, v))
}

// UserAgentContains applies the Contains predicate on the "user_agent" field.
func UserAgentContains(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContains(FieldUserAgent, v))
}

// UserAgentHasPrefix applies the HasPrefix predicate on the "user_agent" field.
func UserAgentHasPrefix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasPrefix(FieldUserAgent, v))
}

// UserAgentHasSuffix applies the HasSuffix predicate on the "user_agent" field.
func UserAgentHasSuffix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasSuffix(FieldUserAgent, v))
}

// UserAgentIsNil applies the IsNil predicate on the "user_agent" field.
func UserAgentIsNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIsNull(FieldUserAgent))
}

// UserAgentNotNil applies the NotNil predicate on the "user_agent" field.
func UserAgentNotNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotNull(FieldUserAgent))
}

// UserAgentEqualFold applies the EqualFold predicate on the "user_agent" field.
func UserAgentEqualFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEqualFold(FieldUserAgent, v))
}

// UserAgentContainsFold applies the ContainsFold predicate on the "user_agent" field.
func UserAgentContainsFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContainsFold(FieldUserAgent, v))
}

// DeviceEQ applies the EQ predicate on the "device" field.
func DeviceEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldDevice, v))
}

// DeviceNEQ applies the NEQ predicate on the "device" field.
func DeviceNEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldDevice, v))
}

// DeviceIn applies the In predicate on the "device" field.
func DeviceIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldDevice, vs...))
}

// DeviceNotIn applies the NotIn predicate on the "device" field.
func DeviceNotIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldDevice, vs...))
}

// DeviceGT applies the GT predicate on the "device" field.
func DeviceGT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldDevice, v))
}

// DeviceGTE applies the GTE predicate on the "device" field.
func DeviceGTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldDevice, v))
}

// DeviceLT applies the LT predicate on the "device" field.
func DeviceLT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldDevice, v))
}

// DeviceLTE applies the LTE predicate on the "device" field.
func DeviceLTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldDevice, v))
}

// DeviceContains applies the Contains predicate on the "device" field.
func DeviceContains(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContains(FieldDevice, v))
}

// DeviceHasPrefix applies the HasPrefix predicate on the "device" field.
func DeviceHasPrefix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasPrefix(FieldDevice, v))
}

// DeviceHasSuffix applies the HasSuffix predicate on the "device" field.
func DeviceHasSuffix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasSuffix(FieldDevice, v))
}

// DeviceIsNil applies the IsNil predicate on the "device" field.
func DeviceIsNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIsNull(FieldDevice))
}

// DeviceNotNil applies the NotNil predicate on the "device" field.
func DeviceNotNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotNull(FieldDevice))
}

// DeviceEqualFold applies the EqualFold predicate on the "device" field.
func DeviceEqualFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEqualFold(FieldDevice, v))
}

// DeviceContainsFold applies the ContainsFold predicate on the "device" field.
func DeviceContainsFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContainsFold(FieldDevice, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldContainsFold(FieldLocation, v))
}

// LoginTimeEQ applies the EQ predicate on the "login_time" field.
func LoginTimeEQ(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldEQ(FieldLoginTime, v))
}

// LoginTimeNEQ applies the NEQ predicate on the "login_time" field.
func LoginTimeNEQ(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNEQ(FieldLoginTime, v))
}

// LoginTimeIn applies the In predicate on the "login_time" field.
func LoginTimeIn(vs ...time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIn(FieldLoginTime, vs...))
}

// LoginTimeNotIn applies the NotIn predicate on the "login_time" field.
func LoginTimeNotIn(vs ...time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotIn(FieldLoginTime, vs...))
}

// LoginTimeGT applies the GT predicate on the "login_time" field.
func LoginTimeGT(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGT(FieldLoginTime, v))
}

// LoginTimeGTE applies the GTE predicate on the "login_time" field.
func LoginTimeGTE(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldGTE(FieldLoginTime, v))
}

// LoginTimeLT applies the LT predicate on the "login_time" field.
func LoginTimeLT(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLT(FieldLoginTime, v))
}

// LoginTimeLTE applies the LTE predicate on the "login_time" field.
func LoginTimeLTE(v time.Time) predicate.LoginLog {
	return predicate.LoginLog(sql.FieldLTE(FieldLoginTime, v))
}

// LoginTimeIsNil applies the IsNil predicate on the "login_time" field.
func LoginTimeIsNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldIsNull(FieldLoginTime))
}

// LoginTimeNotNil applies the NotNil predicate on the "login_time" field.
func LoginTimeNotNil() predicate.LoginLog {
	return predicate.LoginLog(sql.FieldNotNull(FieldLoginTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LoginLog) predicate.LoginLog {
	return predicate.LoginLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LoginLog) predicate.LoginLog {
	return predicate.LoginLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LoginLog) predicate.LoginLog {
	return predicate.LoginLog(sql.NotPredicates(p))
}
